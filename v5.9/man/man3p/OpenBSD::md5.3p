.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenBSD::md5 3p"
.TH OpenBSD::md5 3p "2012-01-15" "perl v5.20.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenBSD::md5 \- simple interface to md5 and sha256 digests
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use OpenBSD::md5;
\&
\&    my $md5 = OpenBSD::md5\->new($filename);
\&    $k\->{$md5\->key} = $filename;
\&
\&    my $ck2 = $md5\->new($filename2);
\&
\&    if ($ck2\->equals(md5)) {
\&         ...
\&    }
\&
\&    print $md5\->stringize # provides an hex representation
\&
\&    my $ck3 = OpenBSD::sha\->new($filename);
\&    !$ck3\->equals($ck2); # comparing is okay, but will never match
\&    my $s = $ck3\->stringize; # base64 representation
\&
\&    my $ck4 = $s\->fromstring; # decodes both base64 and hex
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`OpenBSD::md5\*(C'\fR provides an object-oriented interface to cryptographic
hashing facilities for use in the ports tree.
.PP
In particular, it provides an abstraction to build crypto hashes from
files, convert from and to text, and compare two checksums while
keeping the user from making low-level decisions.
.PP
There are two classes, \f(CW\*(C`OpenBSD::md5\*(C'\fR and \f(CW\*(C`OpenBSD::sha\*(C'\fR which provide the
same facilities, respectively for md5 and sha256 digests.
.PP
The module itself is called \f(CW\*(C`OpenBSD::md5\*(C'\fR for historical reasons.
Support for md5 digests is there for legacy reasons, all new code should
produce and write sha256 digests only.
.ie n .IP "$o = $class\->new($filename)" 8
.el .IP "\f(CW$o\fR = \f(CW$class\fR\->new($filename)" 8
.IX Item "$o = $class->new($filename)"
create a new digest object from the contents of a file.
.ie n .IP "$o = $class\->fromstring($string)" 8
.el .IP "\f(CW$o\fR = \f(CW$class\fR\->fromstring($string)" 8
.IX Item "$o = $class->fromstring($string)"
create a new digest object from a string representation.
.ie n .IP "$o2 = $o\->new($filename) / $o\->fromstring($string)" 8
.el .IP "\f(CW$o2\fR = \f(CW$o\fR\->new($filename) / \f(CW$o\fR\->fromstring($string)" 8
.IX Item "$o2 = $o->new($filename) / $o->fromstring($string)"
create a new digest object \f(CW$o2\fR of the same type as \f(CW$o\fR.
This can be used to compare a file against an existing digest, which may
well be of md5 type in very old packages. Even though the use of md5
is deprecated, checking md5 checksums is still slightly better than nothing...
.ie n .IP "$o\->equal($o2)" 8
.el .IP "\f(CW$o\fR\->equal($o2)" 8
.IX Item "$o->equal($o2)"
compare two digest objects. Returns true only if they're of the same type
and they match.
.ie n .IP "$h{$o\->key} = ..." 8
.el .IP "\f(CW$h\fR{$o\->key} = ..." 8
.IX Item "$h{$o->key} = ..."
return the actual digest as a binary string, for use as a key in hashing.
.ie n .IP "$s = $o\->stringize" 8
.el .IP "\f(CW$s\fR = \f(CW$o\fR\->stringize" 8
.IX Item "$s = $o->stringize"
convert the digest into a suitable text representation.
.ie n .IP "$o\->write($fh)" 8
.el .IP "\f(CW$o\fR\->write($fh)" 8
.IX Item "$o->write($fh)"
writes an appropriate digest annotation on a packing-list filehandle
(see \fIOpenBSD::PackingList\fR\|(3p) and \fIpkg_create\fR\|(1)).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIcksum\fR\|(1) ,
\&\fIDigest::MD5\fR\|(3p) ,
\&\fIDigest::SHA\fR\|(3p) ,
\&\fIMime::Base64\fR\|(3p)
