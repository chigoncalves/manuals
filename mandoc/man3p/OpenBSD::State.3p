.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenBSD::State 3p"
.TH OpenBSD::State 3p "2013-04-16" "perl v5.20.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenBSD::State \- user interface framework
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    package MyCmd::State;
\&    use OpenBSD::State;
\&    our @ISA = qw(OpenBSD::State);
\&
\&    ...
\&    package myCmd;
\&
\&    my $state = MyCmd::State\->new("cmd");
\&    $state\->handle_options(\*(Aqabc\*(Aq, \*(Aq[\-abc]\*(Aq);
\&
\&    ...
\&    $state\->say("I\*(Aqm sorry #1, I\*(Aqm afraid I can\*(Aqt do that", $user);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`OpenBSD::State\*(C'\fR is the base class responsible for handling all user
interface needs of \f(CW\*(C`pkg_*(1)\*(C'\fR commands.
.PP
As such, it contains internal state elements relevant to the working of
various commands.  It should be used for option handling, usage printing,
asking questions, or printing out values.
.PP
\&\f(CW\*(C`OpenBSD::State\*(C'\fR is designed for inheritance.
.PP
It provides default behavior for options \-v and \-D value.
.PP
Subclass \f(CW\*(C`OpenBSD::State::AddCreateDelete\*(C'\fR adds progressmeter behavior, along
with options \-m, \-n and \-x.
.PP
Some methods can be used and overridden safely.
.ie n .IP "$class\->new($cmdname, @params)" 4
.el .IP "\f(CW$class\fR\->new($cmdname, \f(CW@params\fR)" 4
.IX Item "$class->new($cmdname, @params)"
create a new state object of the desired class.
\&\f(CW$cmdname\fR is mandatory to options usage printing.
\&\f(CW@params\fR are passed unchanged to \f(CW\*(C`init\*(C'\fR.
Don't override, override \f(CW\*(C`init\*(C'\fR instead.
.ie n .IP "$state\->init(@params);" 4
.el .IP "\f(CW$state\fR\->init(@params);" 4
.IX Item "$state->init(@params);"
initialize \f(CW$state\fR based on \f(CW@params\fR.
Meant to be overridden. Always call \f(CW\*(C`$state\->SUPER::init(@params)\*(C'\fR at end.
.ie n .IP "$state\->handle_options($opt_string, @usage);" 4
.el .IP "\f(CW$state\fR\->handle_options($opt_string, \f(CW@usage\fR);" 4
.IX Item "$state->handle_options($opt_string, @usage);"
handle options to relevant to this command. Takes a \f(CW\*(C`OpenBSD::Getopt\*(C'\fR
\&\f(CW$opt_string\fR, and a set of \f(CW@usage\fR lines that will be printed if
necessary.
.Sp
Option results are stored in the \f(CW\*(C`$state\->{opt}\*(C'\fR hash. This can
be primed according to \f(CW\*(C`OpenBSD::Getopt\*(C'\fR documentation for options that
require code.
.Sp
Unless \f(CW\*(C`$state\->{no_exports}\*(C'\fR is set, options will also be exported to
calling package, for legacy commands that still use \f(CW\*(C`our ($opt_x)\*(C'\fR constructs.
.Sp
In case of an error, usage will call \f(CW\*(C`die\*(C'\fR.
.Sp
Meant to be overridden.  A subclass \f(CW\*(C`handle_options\*(C'\fR will normally do
all option parsing and stuff the results in the \f(CW$state\fR object.
.ie n .IP "$state\->usage($extra, @args)" 4
.el .IP "\f(CW$state\fR\->usage($extra, \f(CW@args\fR)" 4
.IX Item "$state->usage($extra, @args)"
print out usage line, as set in \f(CW\*(C`handle_options\*(C'\fR, along with possible
extra hints, following \f(CW\*(C`errprint\*(C'\fR conventions.
.ie n .IP "$state\->print($msg, @args);" 4
.el .IP "\f(CW$state\fR\->print($msg, \f(CW@args\fR);" 4
.IX Item "$state->print($msg, @args);"
display a formatted message for the user.
Any \f(CW\*(C`#n\*(C'\fR substring will be replaced by the nth argument from \f(CW@args\fR.
Numbering starts at 1, \f(CW\*(C`#0\*(C'\fR can be used to display an actual \f(CW\*(C`#\*(C'\fR.
.Sp
All messages displayed by \f(CW\*(C`OpenBSD::State\*(C'\fR using commands should use
this framework, so that messages can be translated (eventually).
.Sp
Do not print directly to \f(CW\*(C`STDOUT\*(C'\fR as this might garble the display
(especially with a progressmeter).
.ie n .IP "$state\->errprint($msg, @args);" 4
.el .IP "\f(CW$state\fR\->errprint($msg, \f(CW@args\fR);" 4
.IX Item "$state->errprint($msg, @args);"
like \f(CW\*(C`print\*(C'\fR, but on \f(CW\*(C`STDERR\*(C'\fR.
.ie n .IP "$state\->say($msg, @args);" 4
.el .IP "\f(CW$state\fR\->say($msg, \f(CW@args\fR);" 4
.IX Item "$state->say($msg, @args);"
like \f(CW\*(C`print\*(C'\fR, with a line feed.
.ie n .IP "$state\->errsay($msg, @args);" 4
.el .IP "\f(CW$state\fR\->errsay($msg, \f(CW@args\fR);" 4
.IX Item "$state->errsay($msg, @args);"
like \f(CW\*(C`errprint\*(C'\fR, with a line feed.
.ie n .IP "$state\->fatal($msg, @args);" 4
.el .IP "\f(CW$state\fR\->fatal($msg, \f(CW@args\fR);" 4
.IX Item "$state->fatal($msg, @args);"
use the same conventions as \f(CW\*(C`errsay\*(C'\fR, but call \f(CW\*(C`die\*(C'\fR with the resulting
string.
.ie n .IP "$state\->f($msg, @args);" 4
.el .IP "\f(CW$state\fR\->f($msg, \f(CW@args\fR);" 4
.IX Item "$state->f($msg, @args);"
basic formatting function used by \f(CW\*(C`print\*(C'\fR and friends, return the formatted
string.
.SH "BUGS"
.IX Header "BUGS"
User interface needs are not fully fleshed out and \f(CW\*(C`OpenBSD::State\*(C'\fR is
a work-in-progress.  What's described here should hopefully no longer
change too much.
